============
 The Screen 
============

So, now that we have a 'kernel' that can run and stick itself into an
infinite loop, it's time to get something interesting appearing on the
screen. Along with serial I/O, the monitor will be your most important
ally in the debugging battle.

The theory
==========

Your kernel gets booted by GRUB in text mode. That is, it has
access to a framebuffer (area of memory) that controls a screen
of characters (not pixels) 80 wide by 25 high. This will be the mode
your kernel will operate in until your get into the world of graphics
(which will not be covered in this tutorial).

The area of memory known as the framebuffer is accessible just like
normal RAM, at address *0xB8000*. It is important to note, however,
that it is *not* actually normal RAM. It is part of the VGA
controller's dedicated video memory that has been memory-mapped via
hardware into your linear address space. This is an important
distinction.

The framebuffer is just an array of 16-bit words, each 16-bit value
representing the display of one character. The offset from the start
of the framebuffer of the word that specifies a character at position
*x*, *y* is::

 (y * 80 + x) * 2

What's important to note is that the '* 2' is there only because each
element is 2 bytes (16 bits) long. If you're indexing an array of
16-bit values, for example, your index would just be y*80+x.

In [extended] ASCII (unicode is not supported in text mode), 8 bits are used to
represent a character. That gives us 8 more bits which are unused. The
VGA hardware uses these to designate foreground and background
colours (4 bits each). The splitting of this 16-bit value is shown in
the diagram below.

.. figure:: the_screen_word_format.png
    
    Word format

4 bits for a colour code gives us 15 possible colours we can display:

===== ====================
Index Colour
===== ====================
0     black
1     blue
2     green
3     cyan
4     red
5     magenta
6     brown
7     light grey
8     dark grey
9     light blue
10    light green
11    light cyan
12    light red
13    light magenta
14    light brown / yellow
15    white
===== ====================

The VGA controller also has some ports on the main I/O bus, which you
can use to send it specific instructions. (Among others) it has a
control register at 0x3D4 and a data register at 0x3D5. We will use
these to instruct the controller to update its cursor position.

The practice
============

First things first
~~~~~~~~~~~~~~~~~~

Firstly, we need a few more commonly-used global functions. common.c
and common.h include functions for writing to and reading from the I/O
bus. They are also the ideal place to put functions such as
memcpy/memset etc. I have left them for you to implement! :-)

.. literalinclude:: ../src/common.h
    :start-after: #if CHAPTER >= 3
    :end-before: #endif // CHAPTER >= 3
    :prepend: // src/common.h


.. literalinclude:: ../src/common.c
    :start-after: #if CHAPTER >= 3
    :end-before: // Copy len bytes from src to dest

The monitor code
~~~~~~~~~~~~~~~~

A simple header file:

.. literalinclude:: ../src/monitor.h
    :start-after: #if CHAPTER >= 3
    :end-before: #endif // CHAPTER >= 3 

Moving the cursor
~~~~~~~~~~~~~~~~~

To move the hardware cursor, we must firstly work out the linear
offset of the x,y cursor coordinate. We do this by using the equation
above. Next, we have to send this offset to the VGA controller. For
some reason, it accepts the 16-bit location as two bytes. We send the
controller's command port (0x3D4) the command 14 to tell it we are
sending the high byte, then send that byte to port 0x3D5. We then
repeat with the low byte, but send the command 15 instead.

.. literalinclude:: ../src/monitor.c
    :start-after: // Updates the hardware cursor
    :end-before: // Scrolls the text on the screen up by one line.

Scrolling the screen
~~~~~~~~~~~~~~~~~~~~

At some point we're going to fill up the screen with text. It would be
nice if, when we do that, the screen acted like a terminal and
scrolled up one line. Actually, this really isn't very difficult to
do:

.. literalinclude:: ../src/monitor.c
    :start-after: // Scrolls the text on the screen up by one line.
    :end-before: // Writes a single character out

Writing a character to the screen
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now the code gets a little more complex. But, if you look at it,
you'll see that most of it is logic as to where to put the cursor next - there really isn't much difficult there.

.. literalinclude:: ../src/monitor.c
    :start-after: // Writes a single character
    :end-before: // Clears the screen

See? It's pretty simple!
The bit that actually does the writing is here:

::

 video_memory[cursor_y*80 + cursor_x] = c | attribute;

This sets the 16-bit word at the cursor position to be the logical-OR of the character to write and the attribute. Remember that we shifted attribute left by 8 bits above, so we're actually just setting the lower 8 bits of this word to 'c'.

Clearing the screen
~~~~~~~~~~~~~~~~~~~

Clearing the screen is also dead easy. Just fill it with loads of
spaces:

.. literalinclude:: ../src/monitor.c
    :start-after: // Clears the screen
    :end-before: // Outputs a null-terminated

Writing a string
~~~~~~~~~~~~~~~~

.. literalinclude:: ../src/monitor.c
    :start-after: // Outputs a null-terminated
    :end-before: void monitor_write_hex

Summary
-------

If you put all that code together, you can add a couple of lines to
your main.c file:

::

 monitor_clear();
 monitor_write("Hello, world!");

Et voila - a text output function. Not bad for a couple of minutes'
work!

Extensions
----------

Apart from implementing memcpy/memset/strlen/strcmp etc, there are a
few other functions that will make life easier for you.

::

 void monitor_write_hex(uint32_t n)
 {
    // TODO: implement this yourself!
 }
 
 void monitor_write_dec(uint32_t n)
 {
    // TODO: implement this yourself!
 }

The function names should be pretty self explanatory -- writing in
hexadecimal really is required if you're going to check the validity
of pointers. Decimal is optional but it's nice to see something in
base 10 every once in a while!

.. figure:: the_screen_screenshot.png

    Hello, world!

You could also have a look at the linux 0.1 code - that has an
implementation of vsprintf which is quite neat and tidy. You could
copy that function then use it to implement printf(), which will make
your life a lot easier when it comes to debugging.

Source code for this tutorial is available :download:`here <../tarballs/the_screen.tar.gz>`
