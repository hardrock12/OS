=========
 Genesis
=========

The boot code
=============

OK, It's time for some code! Although the brunt of our kernel will be written in C, there are certain things that we just *must* use assembly for. One of those is the initial boot code.

Here we go:

.. literalinclude:: ../src/boot.s
    :language: nasm


Understanding the boot code
===========================

There's actually only a few lines of code in that snippet:

.. code-block:: nasm

    cli
    mov esp, stack
    push ebx
    mov  ebp, 0
    call main
    jmp $

We'll come back to that later. The rest of the file has to to with the *multiboot header*.

Multiboot
---------

Multiboot is a standard to which GRUB expects a kernel to comply. It is a way for the bootloader to

1. Know exactly what environment the kernel wants/needs when it boots.
2. Allow the kernel to query the environment it is in.

So, for example, if your kernel needs to be loaded in a specific VESA mode (which is a bad idea, by the way), you can inform the bootloader of this and it can take care of it for you.

To make your kernel multiboot compatible you need to add a header structure somewhere in your kernel (Actually, the header must be in the first 8KB of the kernel). Usefully, there is a NASM command that lets us embed specific constants in our code - 'dd'. These lines:

.. code-block:: nasm

        dd  MBOOT_HEADER_MAGIC      ; GRUB will search for this value on each
                                    ; 4-byte boundary in the first 8KB of your kernel file
        dd  MBOOT_HEADER_FLAGS      ; How GRUB should load your file / settings
        dd  MBOOT_CHECKSUM          ; To ensure that the above values are correct

do just that. The MBOOT_* constants are defined above.

MBOOT_HEADER_MAGIC
    A magic number. This identifies the kernel as multiboot-compatible.

MBOOT_HEADER_FLAGS
    A field of flags. We ask for GRUB to page-align all kernel sections (MBOOT_PAGE_ALIGN) and also to give us some memory information (MBOOT_MEM_INFO). Note that some tutorials also use MBOOT_AOUT_KLUDGE. As we are using the ELF file format, this hack is not necessary, and adding it stops GRUB giving you your symbol table when you boot up.

MBOOT_CHECKSUM
    This field is defined such that when the magic number, the flags and this are added together, the total must be zero. It is for error checking.

On bootup, GRUB will load a pointer to another information structure into the EBX register. This can be used to query the environment GRUB set up for us.

Taken directly from the multiboot specification, the information structure looks like this:

.. literalinclude:: ../src/multiboot.h
    :lines: 21-47

We'll explain fields as we come to them in later chapters, but important to note is that I've used standard C typedefs for 32-bit unsigned integers. We don't get these typedefs as standard with the CFLAGS we use, so we have to define them ourselves. This will help with writing portable and readable code.

.. literalinclude:: ../src/common.h
    :lines: 1-15,32-

Back to the code again...
~~~~~~~~~~~~~~~~~~~~~~~~~

So, immediately on bootup, the asm snippet tells the CPU to disable interrupts, allocate us a stack at known location, push the contents of EBX onto the stack and clear the stack frame pointer (this is to help debuggers and stack tracers - more in a later chapter). It then calls a function called "main", then enter an infinite loop.

.. note::
    Technically Multiboot specification requires bootloader to disable interrupts before passing control to your code, but we do it anyway to be on the safe side.

All is good, but the code won't link yet. We haven't defined main()!

Adding some C code
------------------

Interfacing C code and assembly is easy. You just need to know the calling convention used. GCC on x86 uses the cdecl calling convention:

* All parameters to a function are passed on the stack.
* The parameters are pushed *right-to-left*.
* The return value of a function is in EAX.
* The caller cleans up the stack after the call.

\.\.\. so the function call::

    d = func(a, b, c);

Becomes

.. code-block:: nasm

    push [c]
    push [b]
    push [a]
    call func
    mov [d], eax
    add esp, 12     ; The caller (us) must clean up the stack.

So you can see that in our asm snippet above, that 'push ebx' is actually passing
a parameter to the function 'main()'

The C code
~~~~~~~~~~
::

 // main.c -- Defines the C-code kernel entry point, calls initialisation routines.
 //           Made for JamesM's tutorials <www.jamesmolloy.co.uk>
 #include "multiboot.h"
 #include "common.h"
 
 int main(multiboot_t *mboot_ptr)
 {
   // All our initialisation calls will go in here.
   return 0xdeadbeef;
 }

Here's our first incarnation of the main() function. As you can see,
we've made it take just one parameter - a pointer to a multiboot
struct.

All the function does is return a constant - 0xdeadbeef. That constant
is unusual enough that it should stand out at you when we run the
program in a second.

Compiling, linking and running!
-------------------------------

OK, you should now be able to compile, link and run your kernel!

.. code-block:: bash

 make clean  # Removes all temporary files. Ignore any errors here.
 make        # Compiles, assembles and links, then updates the floppy disk image.
 make bochs  # This will run bochs for you.

That should cause bochs to boot, you'll see GRUB for a few seconds
then the kernel will run. It doesn't actually *do* anything, so
it'll just freeze, saying 'starting up...'.

If you open bochsout.txt, at the bottom you should see something like:

.. code-block:: text

 00074621500i[CPU  ] | EAX=deadbeef  EBX=0002d000  ECX=0001edd0 EDX=00000001
 00074621500i[CPU  ] | ESP=00067ec8  EBP=00067ee0  ESI=00053c76 EDI=00053c77
 00074621500i[CPU  ] | IOPL=0 id vip vif ac vm rf nt of df if tf sf zf af pf cf
 00074621500i[CPU  ] | SEG selector     base    limit G D
 00074621500i[CPU  ] | SEG sltr(index|ti|rpl)     base    limit G D
 00074621500i[CPU  ] |  CS:0008( 0001| 0|  0) 00000000 000fffff 1 1
 00074621500i[CPU  ] |  DS:0010( 0002| 0|  0) 00000000 000fffff 1 1
 00074621500i[CPU  ] |  SS:0010( 0002| 0|  0) 00000000 000fffff 1 1
 00074621500i[CPU  ] |  ES:0010( 0002| 0|  0) 00000000 000fffff 1 1
 00074621500i[CPU  ] |  FS:0010( 0002| 0|  0) 00000000 000fffff 1 1
 00074621500i[CPU  ] |  GS:0010( 0002| 0|  0) 00000000 000fffff 1 1
 00074621500i[CPU  ] | EIP=00100027 (00100027)
 00074621500i[CPU  ] | CR0=0x00000011 CR1=0 CR2=0x00000000
 00074621500i[CPU  ] | CR3=0x00000000 CR4=0x00000000
 00074621500i[CPU  ] >> jmp .+0xfffffffe (0x00100027) : EBFE

.. image:: genesis_bochs.png

Notice what the value of EAX is? 0xdeadbeef - the return value of
main(). Congratulations, you now have a multiboot compatible assembly
trampoline, and you're ready to start printing to the screen!

Sample code for this tutorial can be found :download:`here <../tarballs/genesis.tar.gz>`
