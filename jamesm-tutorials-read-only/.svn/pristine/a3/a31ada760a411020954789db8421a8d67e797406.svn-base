===================
 Environment setup
===================

We need a base from which to design and make our kernel. Here I will be assuming that you are using a \*nix system, with the GNU toolchain. If you want to use a windows system, you must either use cygwin (which is a \*nix emulation environment) or DJGPP. Either way, the makefiles and commands in this tutorial may not work.

Please note that if you use cygwin, you may need to make your own `GCC cross compiler`_

Compiling
=========

All examples in this tutorial should compile with the GNU toolchain (gcc, ld) with the exception of the assembly examples which are written in Intel syntax. These require the `Netwide Assembler`_.

This tutorial is *not* a bootloader tutorial. We will be using GRUB_ - the grand unified bootloader - to load our kernel. To do this, we need a floppy disk image with GRUB preloaded onto it. There are `tutorials`_ out there to do this, but I have made a standard image which can be found :download:`here <../floppy.img>`. This is a 1.44MB floppy disk image formatted with the ext2 filesystem with GRUB installed.

Running
=======

There is no alternative for bare hardware as a testbed system. Unfortunately, bare hardware is rather poor at telling you where things went wrong. Enter Bochs_. Bochs is an open-source x86-64 emulator, similar to Qemu but with more debugging features for first-time kernel developers.

When things go pear-shaped, bochs will tell you and store the processor state in a logfile, which can be extremely useful. Also it can be run and rebooted much faster than a real machine. My examples will be made to run well on bochs.

Bochs can be a little slow at times, so an alternative is to use QEmu_. QEmu uses dynamic binary translation (similar to just-in-time compilation) to achieve much faster speeds than bochs, however as it doesn't maintain the processor state precisely for every instruction executed it cannot tell you as easily (or precisely) what state it was in when a crash occurred.


Bochs
-----

Bochs requires a configuration file. Historically these had to be rather large and unportable, but the following two lines work fine with the Bochs packaged with Ubuntu 10.04::

    floppya: 1_44=floppy.img, status=inserted
    log: bochsout.txt

This will tell Bochs to look for a floopy disk image file called "floppy.img", mount it and output logging information to the file "bochsout.txt".

Qemu
----

Running QEmu is substantially simpler::

    qemu -fda floppy.img

Build environment
=================

Link.ld
-------

.. todo::
    Simplify linker script and copypaste in here

Makefile
--------

.. note::
    In makefiles any indented regions are indented by one HARD tab. Spaces will not work.

.. code-block:: make

    CSOURCES=$(shell find -name *.c)
    COBJECTS=$(patsubst %.c, %.o, $(CSOURCES))
    SSOURCES=$(shell find -name *.s)
    SOBJECTS=$(patsubst %.s, %.o, $(SSOURCES))

    CC=gcc
    LD=ld
    CFLAGS=-nostdlib -fno-builtin -m32
    LDFLAGS=-melf_i386 -Tlink.ld
    ASFLAGS=-felf

    all: $(COBJECTS) $(SOBJECTS) link update

    bochs:
            bash scripts/run_bochs.sh

    update:
            @echo Updating floppy image
            @bash scripts/update_image.sh

    clean:
            @echo Removing object files
            @-rm $(COBJECTS) $(SOBJECTS) kernel

    link:
            @echo Linking
            @$(LD) $(LDFLAGS) -o kernel $(SOBJECTS) $(COBJECTS)

    .s.o:
            @echo Assembling $<
            @nasm $(ASFLAGS) $<

    .c.o:
            @echo Compiling $<
            @$(CC) $(CFLAGS) -o $@ -c $<

This Makefile will compile every C and assembly file in the current directory and all subdirectories, and link them together into one ELF binary called 'kernel'. It uses the linker script above (Link.ld_)

update_image.sh
---------------

This script will mount a floppy disk image as a drive and poke your new kernel into it.

.. code-block:: bash

    #!/bin/bash

    sudo losetup /dev/loop0 floppy.img
    sudo mount /dev/loop0 /mnt
    sudo cp src/kernel /mnt/kernel
    sudo umount /dev/loop0
    sudo losetup -d /dev/loop0

.. note::
    You will need /sbin in your $PATH to use losetup.

run_bochs.sh
------------

This is a small wrapper script around bochs' command line;

.. code-block:: bash

    #!/bin/bash
    bochs -f bochsrc.txt

.. _`Netwide Assembler`: http://nasm.sourceforge.net
.. _GRUB: http://www.gnu.org/software/grub
.. _Bochs: http://bochs.sourceforge.net
.. _`GCC cross compiler`: http://wiki.osdev.org/GCC_Cross-Compiler
.. _QEmu: http://www.qemu.org
.. _tutorials: http://wiki.osdev.org/Loopback_Device
